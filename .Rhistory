mydf <- read.table(file = path2cvs, stringsAsFactors = FALSE)
mydf <- read.table(file = path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(file = path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(1:11))
select(cran, -(1:10))
select(cran, -(0:10))
cran
select(cran, -(X:ip_id))
select(cran, -(X:-ip_id))
info()
select(cran, -X:ip_id)
select(cran, -(X:size)
;
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os = "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(3,5,NA,10)
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, asc(country), desc(r_version), asc(ip_id))
arrange(cran2, asce(country), desc(r_version), asce(ip_id))
?arrange
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
swirl()
library(swirl)
swirl()
library(dplyr)
mydf
cran <- tbl_df(mydf)
rm("mydf")
cran
group_by()
group_by(cran, package)
?group_by
by_package <- group_by(cran, package)
by_package
by_package(cran)
by_package(cran)
summarize(cran)
sumarize(by_package, mean(size))
summarize(by_package, mean(size))
submit()
submit(cran)
reset()
reset()
View(cran)
View(by_package)
View(cran)
reset()
reset)_
reset()
View(cran)
summarize(by_package, mean(size))
submit()
submit()
count = n()
count = n(cran)
cran
count = n()
unique = n_distinct(ip_id)
unique = distinct(ip_id)
exit
library(swirl)
swirl()
count = n()
count = n(cran)
?n()
?n
?n_distinct
submit()
submit()
tbl
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
?arrange
?desc
arrange(top_counts, desc(top_counts$count))
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
View(pack_sum)
top_unique <- filter(pack_sum, unique>465)
View(top_unique)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
student2
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data=res, col = sex_class, into = c("sex", "class"))
submit()
students3
?gather
submit()
submit()
submit()
submit()
?spread
submit()
extract_numeric("class5")
?mutate
submit()
submit()
student4
students4
submit()
submit()
?unique
submit()
submit()
submit()
submit()
submit()
submit()
passed
failed
mutate(passed, status="passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?rbind_list
rbind_list(passed, failed, by=name)
rbind_list(passed, failed, by="name")
rbind_list(passed, failed)
sat
submit()
submit()
submit()
View(sat)
View(sat)
?gather
submit()
reset()
?select
submit()
info()
skip()
submit()
submit()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday()
wday(this_day)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
mdy(25081985)
dmy(25081985)
ymd("192012")
ymd("192012//")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(htis_moment, hours = 8, minutes = 34, seconds = 55)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours=8, minutes=45)
this_moment
nyc = "America/New_York"
now("America/New_York")
nyc <- now("America/New_York")
nyc
nyc + days(2)
depart <- nyc + days(2)
depart
update(depart, hours=17, minutes=34)
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
new_interval()
new_interval(arrive, last_time)
?new_interval
new_interval(last_time, arrive)
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
x <- rnorm(100)
hist(x)
y <- rnorm(100)
plot(x,y)
z <- rnorm(100)
plot(x,z)
plot(x,y)
par(mar =c(2,2,2,2))
plot(x,y)
par(mar =c(4,4,2,2))
plot(x,y)
plot(x,y, pch=19)
plot(x,y, pch=3)
plot(x,y, pch=4)
plot(x,y, pch=2)
plot(x,y, pch=10)
plot(x,y, pch=20)
pchShow()
example(points)
plot(x,y, pch=20)
x <- rnorm(100)
y <- rnorm(100)
y <- rnorm(100)
plot(x,y, pch=20)
title("Scatterplot")
text (-2,-2, "Label")
legend("topleft", legend = "Data")
legend("topleft", legend = "Data", pch=20)
fit <- lm(y~x)
abline(fit)
abline(fit, lwd =3)
abline(fit, lwd =3, col="blue")
plot(x,y, xlab="wight", ylab="Height", main="Scatterplot", pch=20)
legend("topright", legend = "Data", pch =20)
par("mar")
par(mfrow=c(1,1))
x <- rnorm(100)
y<- x + rnorm(100)
g <- gl(2,50)
g <- gl(2,50, labels = c("Male", "Female"))
str(g)
plot(x,y)
plot(x,y, type="n")
points(x[ g == "Male"], y[g=="Male"], col = "green")
points(x[ g == "Female"], y[g=="Female"], col = "blue")
points(x[ g == "Female"], y[g=="Female"], col = "blue", pch=19)
library(datasets)
with(faithful, plot(eruptions, waiting))
?Devices
library(datasets)
x <- rnorm(100)
y<- x + rnorm(100)
plot(x,y, type="n")
plot(x,y)
points(col = "blue", pch=19)
points(x, col = "blue", pch=19)
points(y, col = "red", pch=19)
plot(x,y, col = "green" pch=3)
plot(x,y, col = "green", pch=3)
boxplot(x,y)
hist(c,y)
hist(x,y)
hist(x)
hist(y)
library(nlme)
library(lattice)
plot <- xyplot(weight ~ Time | Diet, BodyWeight)
class(plot)
plot
?lattice
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = > ~ Month)
qplot(Wind, Ozone, data = airquality, facets = > . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data=airquality, facets = > ~ factor(Month))
qplot(Wind, Ozone, data=airquality, facets = . ~ factor(Month))
library(ggplot2)
clear
cls
library(ggplot2)
packages.install(ggplot2)
install.packages(ggplot2)
install.packages('ggplot2')
library(ggplot2)
g <- ggplot(moves, aes(votes, rating))
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
plot
panel.lines(votes)
llines(votes)
llines(rating)
?multi-panel
?lattice
axis (side=1, at=seq(1999,2008,by=3))
library(kernlab)
install.packages(kernlab)
install.packages('kernlab')
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator = rbinom(4601, size=1, 0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator ==1,]
testSpam = spam[trainIndicator ==0,]
head(trainSpam)
head(testSpam)
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
version
?knitr
??knitr
time
r time
r time
??qplot
?ggplot2
??ggplot2
data.na
setwd("~/R/repdata-010/RepData_PeerAssessment1")
data <- read.csv(unz("activity.zip", "activity.csv"), sep=",", header=TRUE, na.strings = "NA", stringsAsFactors=FALSE)
data.na <- is.na(data$steps)
data.na
na.filled.data <- data
na.filled.data[is.na(data$steps)] <- (averages[averages$interval == data$interval, "steps"])
averages <- aggregate(x = list(steps = data$steps), by = list(interval = data$interval), FUN = mean, na.rm = TRUE)
na.filled.data <- data
na.filled.data[is.na(data$steps)] <- (averages[averages$interval == data$interval, "steps"])
na.filled.data[is.na(data$steps)] <- 0
head(na.data.filled)
head(na.data.filled)
head(na.filled.data)
na.filled.data[is.na(data$steps)]
head(data)
na.filled.data[is.na(na.filled.data$steps)]
filled.data <- data
filled.data[is.na(data$steps)] <- (averages[averages$interval == data$interval, "steps"])
filled.data[is.na(data$steps)]
head(filled.data[data$steps])
head(filled.data[steps])
head(filled.data["steps"])
head(filled.data[is.na("steps")])
filled.data <- data
get.5min.interval.mean <- function (steps, interval) {
mean.steps <- NA
if(is.na(steps))
mean.steps <- average[averages$interval == interval, "Steps"]
else
mean.steps <- steps
return(mean.steps)
}
filled.data$steps <- mapply(get.5min.interval.mean, filled.data$steps, filled.data.interval)
filled.data$steps <- mapply(get.5min.interval.mean, filled.data$steps, filled.data$interval)
get.5min.interval.mean <- function (steps, interval) {
mean.steps <- NA
if(is.na(steps))
mean.steps <- averages[averages$interval == interval, "Steps"]
else
mean.steps <- steps
return(mean.steps)
}
filled.data$steps <- mapply(get.5min.interval.mean, filled.data$steps, filled.data$interval)
head(filled.data)
tail(filled.data)
filled.data$steps
get.5min.interval.mean <- function (steps, interval) {
mean.steps <- NA
if(is.na(steps))
mean.steps <- averages[averages$interval == interval, "Steps"]
else
mean.steps <- c(steps)
return(mean.steps)
}
filled.data$steps <- mapply(get.5min.interval.mean, filled.data$steps, filled.data$interval)
get.5min.interval.mean <- function (steps, interval) {
mean.steps <- c(steps
if(is.na(steps))
mean.steps <- averages[averages$interval == interval, "Steps"]
return(mean.steps)
}
get.5min.interval.mean <- function (steps, interval) {
mean.steps <- c(steps
if(is.na(steps))
mean.steps <- averages[averages$interval == interval, "Steps"]
mean.steps
}
get.5min.interval.mean <- function (steps, interval) {
mean.steps <- c(steps
if(is.na(steps)) {}
mean.steps <- averages[averages$interval == interval, "Steps"]
}
mean.steps
}
get.5min.interval.mean <- function (steps, interval) {
mean.steps <- c(steps
if(is.na(steps)) {}
mean.steps <- averages[averages$interval == interval, "Steps"]
}
mean.steps
}
get.5min.interval.mean <- function (steps, interval) {
mean.steps <- c(steps
if(is.na(steps)) {
mean.steps <- averages[averages$interval == interval, "Steps"]
}
mean.steps
}
get.5min.interval.mean <- function (steps, interval) {
mean.steps <- c(steps)
if(is.na(steps))
mean.steps <- averages[averages$interval == interval, "Steps"]
mean.steps
}
filled.data$steps <- mapply(get.5min.interval.mean, filled.data$steps, filled.data$interval)
head(averages)
get.5min.interval.mean <- function (steps, interval) {
mean.steps <- c(steps)
if(is.na(steps))
mean.steps <- averages[averages$interval == interval, "steps"]
mean.steps
}
filled.data$steps <- mapply(get.5min.interval.mean, filled.data$steps, filled.data$interval)
filled.data$steps <- mapply(get.5min.interval.mean, filled.data$steps, filled.data$interval)
head(filled.data)
filled.data <- data
head(filled.data)
filled.data$steps <- mapply(get.5min.interval.mean, filled.data$steps, filled.data$interval)
head(filled.data)
tail(filled.data)
filled.data
weekend.or.weekday.data <- data
class(weekend.or.weekday.data$date)
data <- read.csv(unz("activity.zip", "activity.csv"), sep=",", header=TRUE, na.strings = "NA", stringsAsFactors=FALSE)
#cast the date
data$date <- as.Date(data$date, format="%Y-%m-%d")
class(data$date)
weekend.or.weekday.data <- data
weekend.or.weekday <- function(day) {
weekend.or.weekday <- NA
if(day %in% c("Saturday", "Sunday"))
weekend.or.weekday <- "Weekend"
else if(day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
weekend.or.weekday <- "Weekday"
else
weekend.or.weekday <- NA
weekend.or.weekday
}
weekend.or.weekday.data$day <- sapply(weekend.or.weekday.data, weekdays(weekend.or.weekday.data$date))
weekdays(data$date)
weekend.or.weekday.data$day <- sapply(FUN=weekend.or.weekday.data, weekdays(weekend.or.weekday.data$date))
weekend.or.weekday.data$day <- sapply(FUN=weekend.or.weekday, weekdays(weekend.or.weekday.data$date))
head(weekend.or.weekday.data)
data
aggregate(data[data$date=="2012-10-03", data$steps], FUN=sum)
head(data)
aggregate(data[data$date=="2012-10-03", "steps"], FUN=sum)
aggregate(x + list(data[data$date=="2012-10-03", "steps"]), by =list(date = data$date), FUN=sum)
aggregate(x = list(data[data$date=="2012-10-03", "steps"]), by =list(date = data$date), FUN=sum)
aggregate(x = list(data[data$date=="2012-10-03", "steps"]), by =list(date = data[data$date == "2012-10-03", "date"), FUN=sum)
aggregate(x = list(data[data$date=="2012-10-03", "steps"]), by =list(date = data[data$date == "2012-10-03", "date"]), FUN=sum)
aggregate(x = list(data[data$date=="2012-10-15", "steps"]), by =list(date = data[data$date == "2012-10-15", "date"]), FUN=sum)
aggregate(x = list(data[data$date=="2012-11-01", "steps"]), by =list(date = data[data$date == "2012-11-01", "date"]), FUN=sum)
